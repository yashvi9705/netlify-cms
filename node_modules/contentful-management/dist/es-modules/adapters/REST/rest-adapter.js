function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import axios from 'axios';
import { createHttpClient } from 'contentful-sdk-core';
import copy from 'fast-copy';
import endpoints from './endpoints';
/**
 * @private
 */
const defaultHostParameters = {
  defaultHostname: 'api.contentful.com',
  defaultHostnameUpload: 'upload.contentful.com'
};
export class RestAdapter {
  constructor(params) {
    _defineProperty(this, "params", void 0);
    _defineProperty(this, "axiosInstance", void 0);
    if (!params.accessToken) {
      throw new TypeError('Expected parameter accessToken');
    }
    this.params = _objectSpread(_objectSpread({}, defaultHostParameters), copy(params));
    this.axiosInstance = createHttpClient(axios, _objectSpread(_objectSpread({}, this.params), {}, {
      headers: _objectSpread(_objectSpread({
        'Content-Type': 'application/vnd.contentful.management.v1+json'
      }, params.userAgent ? {
        'X-Contentful-User-Agent': params.userAgent
      } : {}), this.params.headers)
    }));
  }
  async makeRequest({
    entityType,
    action: actionInput,
    params,
    payload,
    headers,
    userAgent
  }) {
    var _endpoints$entityType;
    // `delete` is a reserved keyword. Therefore, the methods are called `del`.
    const action = actionInput === 'delete' ? 'del' : actionInput;
    const endpoint = // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    (_endpoints$entityType = endpoints[entityType]) === null || _endpoints$entityType === void 0 ? void 0 : _endpoints$entityType[action];
    if (endpoint === undefined) {
      throw new Error('Unknown endpoint');
    }
    return await endpoint(this.axiosInstance, params, payload, _objectSpread(_objectSpread({}, headers), userAgent ? {
      'X-Contentful-User-Agent': userAgent
    } : {}));
  }
}